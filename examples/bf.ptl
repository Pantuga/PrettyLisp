# declare all the important variables
{pointer := 0}
{tape := []}
{tape_size .= 255}

# init tape 
(while {(length tape) .<= tape_size} 
  {tape = (append tape 0)}
)

{code .= (input)} # get input code from user
{i := 0}

# the function that evaluates one symbol
(define eval ["x"] <
  (ifelse {x == \>}
    {pointer = {pointer+1}}
    (ifelse {x == \<}
      {pointer = {pointer-1}}
      (ifelse {x == \.}
        (print (char {tape at pointer}))
        (ifelse {x == \,}
          (set_at tape pointer {(input) at 0})
          (ifelse {x == \+}
            (set_at tape pointer {{tape at pointer} + 1})
            (ifelse {x == \-}
              (set_at tape pointer {{tape at pointer} - 1})
              (if {x == \[} <
                {i = {i+1}}
                {start_i .= i}
                (while {{tape at pointer} != 0} <
                  (for <>{{code at i} != \]}{i = {i+1}} <
                    (eval {code at i})
                  >)
                  {i = start_i}
                >)
              >)
            )
          )
        )
      )
    )
  )
  # wrap around logic
  (if {pointer .> tape_size} {pointer = 0})
  (if {pointer .< 0} {pointer = tape_size})
>)

# evaluate every symbol in the code
(for <>{i .< (length code)}{i={i+1}} <
  (eval {code at i})
>)